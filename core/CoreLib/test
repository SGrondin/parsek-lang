<code> digit <is> ['0,'1,'2,'3,'4,'5,'6,'7,'8,'9];
(digit -> digit) simple-next <is> [ ('0 -> '1),('1 -> '2),('2 -> '3), 
   ('3 -> '4),('4 -> '5),('5 -> '6),('6 -> '7),('7 -> '8),('8 -> '9)];
(digit -> digit) next <is> [ ('9 -> '0), simple-next ];
(digit -> digit) previous <is> next | next | next | next 
   | next | next | next | next | next;
({'x digit, 'y digit} -> {}) x=y <is>
  [ ({'x'9,'y'9} -> {}),
    (... -> {'x $.x | simple-next, 'y $.y | simple-next}) | x=y ];
({'x digit,'y digit} -> {}) x<=y <is> 
   [ x=y, (... -> {'x $.x | simple-next, 'y $.y}) | x<=y];
({'x digit,'y digit} -> {}) x<y <is>
   (... -> {'x $.x | simple-next, 'y $.y}) | x<=y;
({'x digit, 'y digit} -> {'d digit, 'c digit}) x+y <is>
   [({'y '0, ...} -> {'d $.x, 'c '0}),
    ({'x '9,...} -> {'d $.y | previous, 'c '1}),
    (... -> {'x $.x|simple-next, 'y $.y|previous}) | x+y]; 
({'x digit, 'y digit} -> {'d digit, 'c digit}) x-y <is>
   [({'y '0, ...} -> {'d $.x, 'c '0}),
    ({'x '0, ...} -> {'d [{'x '9, 'y $.y|previous} | x-y].d, 'c '1}),
    (... -> {'x $.x|previous, 'y $.y|previous})|x-y ]; 
({'x digit, 'y digit} -> digit) +g <is> x+y.d;
({'x digit, 'y digit} -> digit) +c <is> x+y.c;
({'x digit, 'y digit} -> digit) -g <is> x-y.d;
({'x digit, 'y digit} -> digit) -c <is> x-y.c;
({'x digit, 'y digit} -> {'d digit, 'c digit}) x*y <is>
   (... -> {'x $.x, 'y $.y, 'c '0}) :: x*y_wc;
({'x digit, 'y digit, 'c digit} -> {'d digit, 'c digit}) x*y_wc <is>
   [({'x '0,...} -> {'d '0, 'c '0}),
    (... ->
      {'a {'x $.x | previous, 'y $.y, 'c $.c} | x*y_wc,
       'b {'x @a.d, 'y $.y} | x+y,
       'c {'d @b.d, 'c {'x @b.c, 'y @a.c} | +g} } ).c ];
({'x digit, 'y digit, 'z digit} -> {'d digit, 'c digit}) x+y+z <is>
   ( ... -> 
     {'a {'x $.x, 'y $.y } | x+y, 
      'b {'x @a.d, 'y $.z} | x+y, 
      'c {'d @b.d, 'c {'x @a.c, 'y @b.c} | +g}}) . c;

# {'x x,'y y,'z z} | x-y-z = {'d d, 'c c} iff d - 10*c = x - y - z
({'x digit, 'y digit, 'z digit} -> {'d digit, 'c digit}) x-y-z <is>
   ( ... -> 
     {'a {'x $.x, 'y $.y } | x-y, 
      'b {'x @a.d, 'y $.z} | x-y, 
      'c {'d @b.d, 'c {'x @a.c, 'y @b.c} | +g}}) . c;



-- Decimal encoding of natural numbers plus the operations.
-- requires "digits.k"

<code> dnat <is> ['_, '0 dnat, '1 dnat, '2 dnat,'3 dnat,'4 dnat, 
       	    	      '5 dnat, '6 dnat, '7 dnat, '8 dnat, '9 dnat ];

# dnat 123 = '1'2'3'_;

(dnat -> dnat) remove_leading_zeros = 
      [ 
        ('0 ... -> $.0) | remove_leading_zeros,
	(... -> $) 
      ];

(dnat -> digit) first_digit =[
     ('0 ..., '_ -> '0),
     ('1 ... -> '1),
     ('2 ... -> '2),
     ('3 ... -> '3),
     ('4 ... -> '4),
     ('5 ... -> '5),
     ('6 ... -> '6),
     ('7 ... -> '7),
     ('8 ... -> '8),
     ('9 ... -> '9)];

(dnat -> dnat) rm_first_digit =  [ 
     ('_ -> '_),
     (... -> [$.0,$.1,$.2,$.3,$.4,$.5,$.6,$.7,$.8,$.9])
];

(dnat -> {'n dnat,'d digit}) decompose =
     (... -> {'n $|rm_first_digit, 'd $|first_digit});

({'n dnat, 'd digit} -> dnat) prepend_digit = [
     ({'d '0,...} -> '0 $.n),
     ({'d '1,...} -> '1 $.n),
     ({'d '2,...} -> '2 $.n),
     ({'d '3,...} -> '3 $.n),
     ({'d '4,...} -> '4 $.n),
     ({'d '5,...} -> '5 $.n),
     ({'d '6,...} -> '6 $.n),
     ({'d '7,...} -> '7 $.n),
     ({'d '8,...} -> '8 $.n),
     ({'d '9,...} -> '9 $.n)];

({'n dnat, 'd digit} -> dnat) append_digit = [ 
        ({'n '_, ...} -> $) | prepend_digit,
	(... ->  {'d $.n | first_digit, 
	     	  'n {'n $.n | rm_first_digit, 'd $.d} | append_digit
		 }) | prepend_digit
	];		 

(dnat -> dnat) reverse = 
     [ 
        ('_ -> '_),
	decompose 
	| (... -> {'n $.n | reverse, 'd $.d}) 
	| append_digit
     ];

({'x dnat, 'y dnat} -> dnat) x++y = (... ->
     {'x $.x | reverse, 'y $.y | reverse, 'c'0})
     | x+y+c | reverse;
      
({'x dnat, 'y dnat, 'c digit} -> dnat) x+y+c =
     [
      ({'x'_,'y'_,'c'0} -> '_),
      ({'x'_,'y'_,...} -> {'n '_,'d $.c}) | prepend_digit,
      (... ->
        {'x $.x | decompose, 
	 'y $.y | decompose,
	 'x+y+c {'x @x.d, 'y @y.d, 'z $.c} | x+y+z,
	 'r {'n {'x @x.n, 'y @y.n, 'c @x+y+c.c} | x+y+c,
	     'd @x+y+c.d
            } | prepend_digit
         }).r
];
 
/* 
dnat main <is> {'x '9'9'9'_, 'y'5'2'1'_} | x++y;
*/

({'x dnat, 'y dnat} -> dnat) x--y <is> (... -> 
     {'x $.x|reverse, 'y $.y|reverse, 'c '0 })
     | x-y-c | reverse;

({'x dnat, 'y dnat, 'c digit} -> dnat) x-y-c <is>
     [
      ({'x'_, ...} -> '_),
      ({'y'_, 'c'0, ...} ->  $.x),
      ({'y'_, ...} -> {'x $.x, 'y '0'_, 'c $.c}) | x-y-c,
      (... ->
        {'x $.x | decompose, 
	 'y $.y | decompose,
	 'x-y-c {'x @x.d, 'y @y.d, 'z $.c} | x-y-z,
	 'r {'n {'x @x.n, 'y @y.n, 'c @x-y-c.c} | x-y-c,
	     'd @x-y-c.d
            } | prepend_digit
         }).r
      ];	 
      
dnat main <is> {'x '1'1'_, 'y '2'1'_} | x++y;