<type> nat <is> ['0, '1 nat];      -- (recursive) variant type

<type> nat2 <is> ['0, '1 {'f nat, 's ['a, 'b]}];


nat2 tt = '1 {'f '0, 's'a};

nat2 main = tt;


-- examples:
({} -> nat) 0 = '0;
({} -> nat) 1 = '1'0;
nat 10 = '1'1'1'1'1'1'1'1'1'1'0;

(pair -> {}) ==  <is> [
      ({'x '0, 'y '0} -> {}),
      (... -> {'x $.x.1, 'y $.y.1} | == ) ];

(nat -> nat) ++ <is> [
  ('1'1'1'1 ... -> $),
  ('0, '1'0, '1'1'0, '1'1'1'0 -> '1 $)];

nat main4 = 0 | ++ | ++ | ++;


<type> pair <is> {'x nat, 'y nat};  -- record type
-- examples:
pair 0_and_1 = {'x 0, 'y 1};
pair 1_10 = {'y 10, 'x '1'0};  

(pair -> pair) swap = (... -> {'x $.y, 'y $.x});
(nat -> pair) double = ($arg nat -> {'x $arg, 'y $arg});
// or  (nat -> {'x $, 'y $});
// or  (... -> {'x $, 'y $});

({} -> nat) get_nat = <input>;      -- FIFOs
(nat -> {}) put_nat = <output>;

(pair -> nat ) f1 = ({'x nat, 'y '0 } -> $.x);
(pair -> nat ) f2 =  ({'x '1 nat, ...} -> {'x $.x.1, 'y $.y.1}) | x-y;

({'x nat, 'y nat} -> nat) x-y = [ f1, f2 ];

(pair -> nat) y-x = swap :: x-y;

pair get_pair = {'x get_nat, 'y get_nat  <serialize> get_nat};
pair get_bla = {'x get_nat, 'y get_nat | (... -> get_nat) };
skip_a_nat = get_nat :: (nat -> {});


(nat -> nat) find <is>  [
         (... -> {'x $, 'y get_nat} :: == :: '0),
         ($x ... -> get_nat | (... -> '1 [$x :: find]))
];     


nat main9 <is> '1'1'1'1'1'1'0 :: find;

  
     
       
// ({}->{}) main ...
// {} main ...
nat main6 =
 [
   get_bla.x, 
   skip_a_nat | get_nat,
  
  {'y get_nat, 'x  '1'1'1'1'1 @y} :: x-y,

   skip_a_nat :: get_pair :: '1 [y-x, x-y]  

   <shortest> get_nat
  -- <longest> get_nat
 ] :: (... -> $ | put_nat | $);

pair main7 <is> get_bla :: (... -> get_bla);

