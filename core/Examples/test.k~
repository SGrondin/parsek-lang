---  TYPE DEFS  
 <type> nat <is> ['0 __unit, '1 nat];
 <type> nat2 <is> ['0 __unit, '1 d~3];
 <type> pair <is> {'x nat, 'y nat};
 <type> d~10 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~11 <is> ['0 __unit, '1 nat];
 <type> d~12 <is> ['0 __unit, '1 nat];
 <type> d~13 <is> ['0 __unit, '1 nat];
 <type> d~14 <is> ['0 __unit, '1 nat];
 <type> d~15 <is> ['0 __unit, '1 nat];
 <type> d~16 <is> ['0 __unit, '1 nat];
 <type> d~17 <is> ['0 __unit, '1 nat];
 <type> d~18 <is> ['0 __unit, '1 nat];
 <type> d~19 <is> ['0 __unit, '1 nat];
 <type> d~2 <is> ['a __unit, 'b __unit];
 <type> d~20 <is> {'x nat, 'y nat};
 <type> d~21 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> d~22 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> d~23 <is> ['0 {}, '1 nat];
 <type> d~24 <is> ['0 __unit, '1 nat];
 <type> d~25 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> d~26 <is> ['0 {}, '1 nat];
 <type> d~27 <is> ['0 __unit, '1 nat];
 <type> d~28 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~29 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~3 <is> {'f nat, 's ~2};
 <type> d~30 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> d~31 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> d~32 <is> {'f nat, 's d~2};
 <type> d~33 <is> {'x nat, 'y nat};
 <type> d~34 <is> {'x nat, 'y nat};
 <type> d~35 <is> {'x nat, 'y nat};
 <type> d~36 <is> {'x nat, 'y nat};
 <type> d~37 <is> ['0 __unit, '1 nat];
 <type> d~38 <is> ['0 __unit, '1 nat];
 <type> d~39 <is> ['0 __unit, '1 nat];
 <type> d~40 <is> ['0 __unit, '1 nat];
 <type> d~41 <is> ['0 __unit, '1 nat];
 <type> d~42 <is> ['0 __unit, '1 nat];
 <type> d~43 <is> {'x nat, 'y nat};
 <type> d~44 <is> ['0 __unit, '1 nat];
 <type> d~45 <is> ['0 __unit, '1 nat];
 <type> d~46 <is> ['0 __unit, '1 nat];
 <type> d~47 <is> ['0 __unit, '1 nat];
 <type> d~48 <is> ['0 __unit, '1 nat];
 <type> d~49 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~50 <is> ['0 __unit, '1 nat];
 <type> d~51 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~52 <is> ['0 __unit, '1 nat];
 <type> d~53 <is> {'x nat, 'y nat};
 <type> d~54 <is> {'x nat, 'y nat};
 <type> d~55 <is> {'x nat, 'y nat};
 <type> d~56 <is> {'x nat, 'y nat};
 <type> d~57 <is> ['0 __unit, '1 nat];
 <type> d~58 <is> {'x nat, 'y nat};
 <type> d~59 <is> ['0 __unit, '1 nat];
 <type> d~6 <is> pair;
 <type> d~60 <is> ['0 __unit, '1 nat];
 <type> d~61 <is> ['0 __unit, '1 nat];
 <type> d~62 <is> ['0 __unit, '1 nat];
 <type> d~63 <is> ['0 __unit, '1 nat];
 <type> d~64 <is> {'x nat, 'y nat};
 <type> d~65 <is> {'x nat, 'y nat};
 <type> d~66 <is> ['0 __unit, '1 nat];
 <type> d~67 <is> ['0 __unit, '1 nat];
 <type> d~68 <is> {'x nat, 'y nat};
 <type> d~69 <is> {'x nat, 'y nat};
 <type> d~7 <is> ['0 __unit, '1 nat];
 <type> d~70 <is> {'x nat, 'y nat};
 <type> d~71 <is> ['0 __unit, '1 nat];
 <type> d~72 <is> ['0 __unit, '1 nat];
 <type> d~73 <is> {'x nat, 'y ['0 {}, '1 nat]};
 <type> d~74 <is> {'x nat, 'y ['0 {}, '1 nat]};
 <type> d~75 <is> {'x ['0 __unit, '1 nat], 'y nat};
 <type> d~76 <is> ['0 __unit, '1 nat];
 <type> d~77 <is> ['0 __unit, '1 nat];
 <type> d~78 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~79 <is> ['0 __unit, '1 nat];
 <type> d~8 <is> ['0 __unit, '1 nat];
 <type> d~80 <is> ['0 __unit, '1 nat];
 <type> d~81 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~82 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~83 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~84 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~85 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~86 <is> {'x nat, 'y nat};
 <type> d~87 <is> {'x nat, 'y nat};
 <type> d~88 <is> {'x nat, 'y nat};
 <type> d~89 <is> {'x nat, 'y nat};
 <type> d~9 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> d~90 <is> {'x nat, 'y nat};

--- Type aliases

--- REL DEFS 
 (nat -> nat) find = [( ... -> [{'x $, 'y get_nat} :: == :: '0 {}]), ($x ... -> [get_nat :: ( ... -> '1 [$x :: find])])];
 (__unit -> pair) get_bla = {'x get_nat, 'y [get_nat :: ( ... -> get_nat)]};
 (pair -> __unit) == = [( {'x '0 {}, 'y '0 {}} -> {}), ( ... -> [{'x $.x.1, 'y $.y.1} :: ==])];
 (__unit -> nat2) tt = '1 {'f '0 {}, 's 'a {}};
 (__unit -> pair) 0_and_1 = {'x 0, 'y 1};
 (nat -> __unit) put_nat = <output>;
 (__unit -> nat) 0 = '0 {};
 (__unit -> nat) 1 = '1 '0 {};
 (__unit -> pair) get_pair = {'x get_nat, 'y get_nat<concat> get_nat};
 (__unit -> nat2) main = tt;
 (pair -> nat) y-x = [swap :: x-y];
 (__unit -> nat) get_nat = <input>;
 (__unit -> nat) main4 = [0 :: ++ :: ++ :: ++];
 (nat -> nat) ++ = [( '1 '1 '1 '1 ... -> $), ( '0 {}, '1 '0 {}, '1 '1 '0 {}, '1 '1 '1 '0 {} -> '1 $)];
 (__unit -> nat) main6 = [[get_bla.x, [skip_a_nat :: get_nat], [{'y get_nat, 'x '1 '1 '1 '1 '1 @y} :: x-y], [skip_a_nat :: get_pair :: '1 [y-x, x-y]]<shortest> get_nat ] :: ( ... -> [$ :: put_nat :: $])];
 (__unit -> pair) main7 = [get_bla :: ( ... -> get_bla)];
 (__unit -> nat) main9 = ['1 '1 '1 '1 '1 '1 '0 {} :: find];
 (nat -> pair) double = ($arg nat -> {'x $arg, 'y $arg});
 (__unit -> pair) 1_10 = {'y 10, 'x '1 '0 {}};
 (__unit -> __unit) skip_a_nat = [get_nat :: ( nat -> {})];
 (__unit -> nat) 10 = '1 '1 '1 '1 '1 '1 '1 '1 '1 '1 '0 {};
 (pair -> nat) f1 = ( {'x nat, 'y '0 {}} -> $.x);
 (pair -> nat) f2 = [( {'x '1 nat, ...} -> {'x $.x.1, 'y $.y.1}) :: x-y];
 (d~6 -> nat) x-y = [f1, f2];
 (pair -> pair) swap = ( ... -> {'x $.y, 'y $.x});

