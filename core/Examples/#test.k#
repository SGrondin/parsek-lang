---  TYPE DEFS  
 <type> nat <is> ['0 __unit, '1 nat];
 <type> nat2 <is> ['0 __unit, '1 ~3];
 <type> pair <is> {'x nat, 'y nat};
 <type> ~10 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~11 <is> ['0 __unit, '1 nat];
 <type> ~12 <is> ['0 __unit, '1 nat];
 <type> ~13 <is> ['0 __unit, '1 nat];
 <type> ~14 <is> ['0 __unit, '1 nat];
 <type> ~15 <is> ['0 __unit, '1 nat];
 <type> ~16 <is> ['0 __unit, '1 nat];
 <type> ~17 <is> ['0 __unit, '1 nat];
 <type> ~18 <is> ['0 __unit, '1 nat];
 <type> ~19 <is> ['0 __unit, '1 nat];
 <type> ~2 <is> ['a __unit, 'b __unit];
 <type> ~20 <is> {'x nat, 'y nat};
 <type> ~21 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> ~22 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> ~23 <is> ['0 {}, '1 nat];
 <type> ~24 <is> ['0 __unit, '1 nat];
 <type> ~25 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> ~26 <is> ['0 {}, '1 nat];
 <type> ~27 <is> ['0 __unit, '1 nat];
 <type> ~28 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~29 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~3 <is> {'f nat, 's ~2};
 <type> ~30 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> ~31 <is> {'x ['0 {}, '1 nat], 'y ['0 {}, '1 nat]};
 <type> ~32 <is> {'f nat, 's ~2};
 <type> ~33 <is> {'x nat, 'y nat};
 <type> ~34 <is> {'x nat, 'y nat};
 <type> ~35 <is> {'x nat, 'y nat};
 <type> ~36 <is> {'x nat, 'y nat};
 <type> ~37 <is> ['0 __unit, '1 nat];
 <type> ~38 <is> ['0 __unit, '1 nat];
 <type> ~39 <is> ['0 __unit, '1 nat];
 <type> ~40 <is> ['0 __unit, '1 nat];
 <type> ~41 <is> ['0 __unit, '1 nat];
 <type> ~42 <is> ['0 __unit, '1 nat];
 <type> ~43 <is> {'x nat, 'y nat};
 <type> ~44 <is> ['0 __unit, '1 nat];
 <type> ~45 <is> ['0 __unit, '1 nat];
 <type> ~46 <is> ['0 __unit, '1 nat];
 <type> ~47 <is> ['0 __unit, '1 nat];
 <type> ~48 <is> ['0 __unit, '1 nat];
 <type> ~49 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~50 <is> ['0 __unit, '1 nat];
 <type> ~51 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~52 <is> ['0 __unit, '1 nat];
 <type> ~53 <is> {'x nat, 'y nat};
 <type> ~54 <is> {'x nat, 'y nat};
 <type> ~55 <is> {'x nat, 'y nat};
 <type> ~56 <is> {'x nat, 'y nat};
 <type> ~57 <is> ['0 __unit, '1 nat];
 <type> ~58 <is> {'x nat, 'y nat};
 <type> ~59 <is> ['0 __unit, '1 nat];
 <type> ~6 <is> pair;
 <type> ~60 <is> ['0 __unit, '1 nat];
 <type> ~61 <is> ['0 __unit, '1 nat];
 <type> ~62 <is> ['0 __unit, '1 nat];
 <type> ~63 <is> ['0 __unit, '1 nat];
 <type> ~64 <is> {'x nat, 'y nat};
 <type> ~65 <is> {'x nat, 'y nat};
 <type> ~66 <is> ['0 __unit, '1 nat];
 <type> ~67 <is> ['0 __unit, '1 nat];
 <type> ~68 <is> {'x nat, 'y nat};
 <type> ~69 <is> {'x nat, 'y nat};
 <type> ~7 <is> ['0 __unit, '1 nat];
 <type> ~70 <is> {'x nat, 'y nat};
 <type> ~71 <is> ['0 __unit, '1 nat];
 <type> ~72 <is> ['0 __unit, '1 nat];
 <type> ~73 <is> {'x nat, 'y ['0 {}, '1 nat]};
 <type> ~74 <is> {'x nat, 'y ['0 {}, '1 nat]};
 <type> ~75 <is> {'x ['0 __unit, '1 nat], 'y nat};
 <type> ~76 <is> ['0 __unit, '1 nat];
 <type> ~77 <is> ['0 __unit, '1 nat];
 <type> ~78 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~79 <is> ['0 __unit, '1 nat];
 <type> ~8 <is> ['0 __unit, '1 nat];
 <type> ~80 <is> ['0 __unit, '1 nat];
 <type> ~81 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~82 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~83 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~84 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~85 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~86 <is> {'x nat, 'y nat};
 <type> ~87 <is> {'x nat, 'y nat};
 <type> ~88 <is> {'x nat, 'y nat};
 <type> ~89 <is> {'x nat, 'y nat};
 <type> ~9 <is> {'x ['0 __unit, '1 nat], 'y ['0 __unit, '1 nat]};
 <type> ~90 <is> {'x nat, 'y nat};

--- Type aliases

--- REL DEFS 
 (nat -> nat) find = [( ... -> [{'x $, 'y get_nat} :: == :: '0 {}]), ($x ... -> [get_nat :: ( ... -> '1 [$x :: find])])];
 (__unit -> pair) get_bla = {'x get_nat, 'y [get_nat :: ( ... -> get_nat)]};
 (pair -> __unit) == = [( {'x '0 {}, 'y '0 {}} -> {}), ( ... -> [{'x $.x.1, 'y $.y.1} :: ==])];
 (__unit -> nat2) tt = '1 {'f '0 {}, 's 'a {}};
 (__unit -> pair) 0_and_1 = {'x 0, 'y 1};
 (nat -> __unit) put_nat = <output>;
 (__unit -> nat) 0 = '0 {};
 (__unit -> nat) 1 = '1 '0 {};
 (__unit -> pair) get_pair = {'x get_nat, 'y get_nat<concat> get_nat};
 (__unit -> nat2) main = tt;
 (pair -> nat) y-x = [swap :: x-y];
 (__unit -> nat) get_nat = <input>;
 (__unit -> nat) main4 = [0 :: ++ :: ++ :: ++];
 (nat -> nat) ++ = [( '1 '1 '1 '1 ... -> $), ( '0 {}, '1 '0 {}, '1 '1 '0 {}, '1 '1 '1 '0 {} -> '1 $)];
 (__unit -> nat) main6 = [[get_bla.x, [skip_a_nat :: get_nat], [{'y get_nat, 'x '1 '1 '1 '1 '1 @y} :: x-y], [skip_a_nat :: get_pair :: '1 [y-x, x-y]]<shortest> get_nat ] :: ( ... -> [$ :: put_nat :: $])];
 (__unit -> pair) main7 = [get_bla :: ( ... -> get_bla)];
 (__unit -> nat) main9 = ['1 '1 '1 '1 '1 '1 '0 {} :: find];
 (nat -> pair) double = ($arg nat -> {'x $arg, 'y $arg});
 (__unit -> pair) 1_10 = {'y 10, 'x '1 '0 {}};
 (__unit -> __unit) skip_a_nat = [get_nat :: ( nat -> {})];
 (__unit -> nat) 10 = '1 '1 '1 '1 '1 '1 '1 '1 '1 '1 '0 {};
 (pair -> nat) f1 = ( {'x nat, 'y '0 {}} -> $.x);
 (pair -> nat) f2 = [( {'x '1 nat, ...} -> {'x $.x.1, 'y $.y.1}) :: x-y];
 (~6 -> nat) x-y = [f1, f2];
 (pair -> pair) swap = ( ... -> {'x $.y, 'y $.x});

