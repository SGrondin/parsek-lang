\documentclass{book}

\newcommand{\kernel}{{\it kernel}}
\newcommand{\Kernel}{{\it Kernel}}
\newcommand{\out}[1]{}

\title{Kernel: an application of the formal language theory for system
  development} \author{Wojciech Fraczak}


\begin{document}
\maketitle

\chapter*{Introduction and motivation}

\Kernel{} is a notation for describing computer systems. The notation
is both a programing language which can be compiled into a highly
optimized machine code, and a specification language used for modeling or
verification purposes.

The main features unique to \kernel{} notation are:
\begin{itemize}
\item the uniform syntax and semantics for printable (flat/non-functional)
  values as rooted labeled trees; 
\item its precise mathematical semantics in terms of relations over
  printable values;
\item the operational semantics of \kernel{} programs in terms of FIFO
  systems, i.e., networks of finite automata connected by FIFO
  channels;
\item the main construct of \kernel{} notation is the composition of
  relations and not a ``function call''; 
\item interchangeable nature of behavioral and functional aspects of
  system components in the sense that both are represented by state
  machines.
\end{itemize}

The theory of formal languages and automata plays a very important
role in the theoretical computer science of today. However in practice
of software development, the results of the formal languages theory
are too often limited to a the process of ``parsing'', a small part of
compilation, interpretation, or verification of programs. \Kernel{}
uses the theory of formal languages and automata beyond the process of
parsing. In \kernel{}, the ``values'' are seen as rooted labeled trees
encoded by strings, and the ``functions'' are relations represented by
(networks of) transducers. All \kernel{} constructs correspond to some
operations on relations such as composition, intersection, or
projection. Such an approach allows us to use techniques and results
of formal language theory for every stage of a system development.

We tried to render the book self-contained. Thus, apart from the
description of the \kernel{} notation, the document can be seen as an
introduction to the theory of formal languages and automata.

\chapter{Describing infinite objects with
  finite alphabet\\[1cm]
  \hfill \large 
  Until what can we count on our fingers?}

The theory of formal languages and automata can be seen as a
mathematical vehicle for describing infinite objects. In some way the
question is always the same: given a collection of objects (universe),
how to describe sets of those objects in such a way that we could
always answer the following three questions. 
\begin{description}
\item \emph{Does an object take part of the set?} (membership)
\item \emph{Are two sets equal?} (equality)
\item \emph{Is one set a subset of the other?} (inclusion)
\end{description}

Firstly, we define a way of writing down an object. For example, in
the usual decimal numerical system we use the ten digits, from zero
(0) to nine (9), to describe natural numbers. The very first numbers
have intuitive meanings for most of us, like zero (0), one (1), two
(2), or three (3). Bigger numbers have just names, such as ``ninety
two thousand, three hundred and seventy one'' (92371). Even bigger
numbers are just sequences of digits, e.g.,
``$545276150002983765142387213$''.  So, it would seem acceptable to
consider natural numbers as sequences of digits which do not start
with symbol ``$0$'', except for number zero itself. But natural
numbers is more than sequences of digits. For example, even if you do
not know how to name ``$545276150002983765142387213$'', you know that
it is ``bigger'' than ``$1234$''. You probably even know how to
``add'' the two numbers by producing a representation of the result.
The way of ``doing'' the addition can be considered as the definition,
and so on...


One could define the universe of natural numbers $\texttt{Nat}_{10}$
as any finite sequence of the digits.



\out{
In \Kernel{} notation it would be:

\begin{verbatim}
 <type> digit <is> ['0,'1,'2,'3,'4,'5,'6,'7,'8,'9];
 <type> string_of_digits <is> 
     [ 'empty, 
       'string { 'digit digit, 
                 'cont string_of_digits } ] ;
\end{verbatim}

In the above snippet of \Kernel{} code we defined two types. The type
\verb+digit+ is a variant of ten different symbols. The variations are
enumerated within square brackets. The type \verb+string_of_digits+ is
also a variant; either \verb+'empty+ or a record \verb+'string+
composed of two fields listed withing curly brackets: \verb+'digit+ of
type \verb+digit+ and \verb+'cont+ itself of type
\verb+string_of_digits+. This type definition is said to be
\emph{recursive} since the reference to the type being defined is used
within its definition.

A type defines a set of \emph{values}. Type \verb+digit+ has ten values and 
type \verb+string_of_digits+ has infinite number of values.  
}


Usually we give ourselves a finite set of atomic symbols, here ten
digits, and a method (procedure) to build description of objects (here
natural numbers) from those symbols.


Let's start with a small example. 


Consider the set of all natural
numbers, i.e., one, two, three, \ldots and so on. Firstly, we need a
notation for describing the numbers. Probably the simplest and the
most natural encoding of natural numbers is, so called, ``unary
numerical system''. In this notation, number one is represented by one
vertical line \verb+|+, two by two vertical lines \verb+||+, three by
\verb+|||+, and so on. Thus, any sequence of vertical lines
corresponds to a natural number.



\section{FIFO system for Stack}

see Examples/stack.k,pipe.k

\section{How to encode trees in order to filter them with FIFOs?}


\end{document}
